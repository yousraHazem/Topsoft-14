# This is Photo Model that is used to upload Photos into the website
# The uploading process mostly happens with usage of CarrierWave Gem
# Attributes : * description - string
#              * image - string (Name of the image file on the machine)
#              * remote_image_url - string  (The url of the image web  => HAS TO BE NAMED LIKE THIS)
#              * id - integer (Auto-increment key generated by the database)
# Relations  : * Photo can have many comments and tags
#              * A photo should belong to a post
# Constrains : * A description to the photo should be present
#            : * A local image should present OR an external hyperLink
#            : * The image file should be of extension (jpg jpeg gif png) 
#                and this ensured in ImageUploader class using def extension_white_list 
# Author     : Hussien M. Eloy              
class Photo < ActiveRecord::Base
  mount_uploader :image, ImageUploader
  # has_many :comments,:tags    <<< to be un-commented once these models are created
  # belongs_to :post    <<< to be un-commented once these models are created        
  validates_presence_of :description, :image 

  # This method is used to Allow accessing model attributes As Rails 4 does
  # not support "attr_accessible" keyword
  # Parameters : None
  # Returns : None
  # Approach : The method is  just making The model's column accessible
  # Time Complexity : O(1)
  # Author : Hussien M. Eloy  
  def photo_params
    params.require(:photo).permit(:description, :image, :remote_image_url)
  end

  # This method returns the value of the photo id
  # Parameteres : None
  # Returns : id - integer
  # Approach : Just selecting the value of the current photo id from the database
  # Time Complexity : Unknown (database query)
  # Author : Hussien M. Eloy
  def get_id
    self[:id]
  end

  # This method returns the photo's description
  # Parameters : None
  # Returns : description - string
  # Approach : Just selecting the description of the current photo  from the database
  # Time Complexity : Unknown (database query)
  # Author : Hussien M. Eloy
  def get_description
    self[:description]
  end

  # This method returns the comments associated with photo
  # Parameters : None
  # Returns : comments - table of comments
  # Approach : Just selecting the comments associated 
  # with the current photo  from the database
  # Time Complexity : Unknown (database query)
  # Author : Hussien M. Eloy
  def get_comments
    # self.comments    <<< to be un-commented once these models are created
  end

  # This method returns the tags associated with photo
  # Parameters : None
  # Returns : tags - table of registered users
  # Approach : Just selecting the tags associated 
  # with the current photo  from the database
  # Time Complexity : Unknown (database query)
  # Author : Hussien M. Eloy
  def get_tags
    # self.tags    <<< to be un-commented once these models are created
  end
    
  # This method adds new comment to the comments of the current photo 
  # Parameters : comment - Comment
  # Returns : None
  # Approach : TBA
  # Time Complexity : TBA
  # Author : Hussien M. Eloy
  def write_comment(comment)
  end

  # This method tags new user to  the current photo 
  # Parameters : registered_user - RegisteredUser
  # Returns : None
  # Approach : TBA
  # Time Complexity : TBA
  # Author : Hussien M. Eloy
  def tag_someone(registered_user)
  end

  # This method edits the description of the photo
  # Parameters : description - string
  # Returns : None
  # Approach : It just updates the description column in the current 
  # photo recored by the value of the parameter
  # Time Complexity : Unknown (database query)
  # Author : Hussien M. Eloy
  def edit_description(description)
    self[:description] = description
  end
end

